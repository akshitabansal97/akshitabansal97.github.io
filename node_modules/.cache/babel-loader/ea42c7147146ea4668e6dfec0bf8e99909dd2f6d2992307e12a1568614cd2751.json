{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nconst useVideo = () => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n  const videoRef = useRef(null);\n  console.log('videoRef', videoRef);\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.playbackRate = playbackRate;\n      videoRef.current.volume = volume;\n    }\n  }, [playbackRate, volume]);\n  const handlePause = () => {\n    videoRef.current.pause();\n    setIsPlaying(false);\n  };\n  const handlePlay = () => {\n    videoRef.current.play();\n    setIsPlaying(true);\n  };\n  return {\n    videoRef,\n    handlePlay,\n    handlePause,\n    isPlaying,\n    playbackRate,\n    setPlaybackRate,\n    volume,\n    setVolume,\n    currentTime,\n    setCurrentTime\n  };\n};\n_s(useVideo, \"rkv7LDeFCuWm3GprteT2Ud7qTaE=\");\nexport default useVideo;","map":{"version":3,"names":["useEffect","useRef","useState","useVideo","_s","isPlaying","setIsPlaying","playbackRate","setPlaybackRate","volume","setVolume","currentTime","setCurrentTime","videoRef","console","log","current","handlePause","pause","handlePlay","play"],"sources":["/Users/akshita/Downloads/vverse/videoflipper/src/hooks/useVideo.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst useVideo = () => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playbackRate, setPlaybackRate] = useState(1);\n  const [volume, setVolume] = useState(1);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const videoRef = useRef(null);\n  console.log('videoRef', videoRef)\n  useEffect(() => {\n    if (videoRef.current) {\n      videoRef.current.playbackRate = playbackRate;\n      videoRef.current.volume = volume;\n    }\n  }, [playbackRate, volume]);\n\n  const handlePause = () => {\n    videoRef.current.pause();\n    setIsPlaying(false);\n  };\n\n  const handlePlay = () => {\n    videoRef.current.play();\n    setIsPlaying(true);\n  };\n\n  return { videoRef, handlePlay, handlePause, isPlaying, playbackRate, setPlaybackRate, volume, setVolume, currentTime, setCurrentTime };\n};\n\nexport default useVideo;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEnD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EAEjD,MAAMW,QAAQ,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC7Ba,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,QAAQ,CAAC;EACjCb,SAAS,CAAC,MAAM;IACd,IAAIa,QAAQ,CAACG,OAAO,EAAE;MACpBH,QAAQ,CAACG,OAAO,CAACT,YAAY,GAAGA,YAAY;MAC5CM,QAAQ,CAACG,OAAO,CAACP,MAAM,GAAGA,MAAM;IAClC;EACF,CAAC,EAAE,CAACF,YAAY,EAAEE,MAAM,CAAC,CAAC;EAE1B,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxBJ,QAAQ,CAACG,OAAO,CAACE,KAAK,CAAC,CAAC;IACxBZ,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAED,MAAMa,UAAU,GAAGA,CAAA,KAAM;IACvBN,QAAQ,CAACG,OAAO,CAACI,IAAI,CAAC,CAAC;IACvBd,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,OAAO;IAAEO,QAAQ;IAAEM,UAAU;IAAEF,WAAW;IAAEZ,SAAS;IAAEE,YAAY;IAAEC,eAAe;IAAEC,MAAM;IAAEC,SAAS;IAAEC,WAAW;IAAEC;EAAe,CAAC;AACxI,CAAC;AAACR,EAAA,CA1BID,QAAQ;AA4Bd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}